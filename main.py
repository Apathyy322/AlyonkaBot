import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from others.config import API_TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    var1 = InlineKeyboardButton(
        text="–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Çüíª",
        url=f"https://prom.ua/c3306069-poshlaya-alyonka.html"
    )
    var2 = InlineKeyboardButton(
        text="–ü–æ–º–æ—â—åüëã",
        callback_data='help'
    )
    var3 = InlineKeyboardButton(
        text='–ß–∞—Å—Ç–æ –ó–∞–¥–∞–≤–∞–µ–º—ã–µ –í–æ–ø—Ä–æ—Å—ã(FAQ)‚ùì',
        callback_data='faq',
        url=f"https://prom.ua/opinions/list/3306069"
    )
    var4 = InlineKeyboardButton(
        text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µü•∑",
        callback_data='data'
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [var1],
        [var2],
        [var3, var4]
    ])
    await message.answer(
        """<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b> 
        \n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ <i>–°–µ–∫—Å—à–æ–ø –ê–ª—ë–Ω–∫–∞!üîû </i>
        \n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? """,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )
    print(f"User ID: {user_id}")


@dp.message(Command('help'))
async def help_command(message: Message):
    text = '<b>Used:/help  -></b> \n\n–Ø - –ë–æ—Ç –¢–µ—Ö–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ <b><i>–°–µ–∫—Å—à–æ–ø –ê–ª—ë–Ω–∫–∞!ü§ñüîû</i></b> \n\n–Ø –Ω—É–∂–µ–Ω –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º!‚úåÔ∏è \n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã <i><b>START</b></i>!üåüüê≤'
    await message.answer(text, parse_mode=ParseMode.HTML)


@dp.callback_query(lambda c: c.data == 'help')
async def process_help_callback(callback_query: CallbackQuery):
    await help_command(callback_query.message)
    await callback_query.answer()


@dp.message(Command('faq'))
async def faq_comm(message: Message):
    text = '<b>Used: faq</b>'
    await message.answer(text, parse_mode=ParseMode.HTML)


@dp.callback_query(lambda c: c.data == 'faq')
async def faq(callback_query: CallbackQuery):
    await faq_comm(callback_query.message)
    await callback_query.answer()


async def fetch_user_data(user: types.User) -> str:
    user_id = user.id
    fsname = user.first_name
    scname = user.last_name
    prem = user.is_premium
    langcode = user.language_code
    botio = user.is_bot

    profile_photos = await bot.get_user_profile_photos(user_id)

    caption_text = f"""
    
<b>Used: /data ->     
    
ID: {user_id} 
–ò–º—è: {fsname}
–§–∞–º–∏–ª–∏—è: {scname}
–Ø–∑—ã–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {langcode}
isPremium: {prem}
isBot: {botio}
</b>

"""

    if profile_photos.total_count > 0:
        photo = profile_photos.photos[0][-1]
        return photo.file_id, caption_text
    else:
        return None, caption_text


@dp.message(Command('data'))
async def get_user_data_command(message: Message):
    user = message.from_user
    photo_id, caption_text = await fetch_user_data(user)

    if photo_id:
        await message.answer_photo(photo_id, caption=caption_text, parse_mode=ParseMode.HTML)
    else:
        await message.answer(caption_text, parse_mode=ParseMode.HTML)


@dp.callback_query(lambda c: c.data == 'data')
async def get_user_data_callback(callback_query: CallbackQuery):
    user = callback_query.from_user
    photo_id, caption_text = await fetch_user_data(user)

    if photo_id:
        await bot.send_photo(callback_query.message.chat.id, photo_id, caption=caption_text, parse_mode=ParseMode.HTML)
    else:
        await bot.send_message(callback_query.message.chat.id, caption_text, parse_mode=ParseMode.HTML)

    await callback_query.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
